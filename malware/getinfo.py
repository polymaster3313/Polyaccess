from psutil import cpu_percent, disk_usage, virtual_memory
import wmi
import requests
from subprocess import Popen, PIPE

def getusername():
    process = Popen("echo %USERNAME%", stdout=PIPE, stderr=PIPE, shell=True)
    output, error = process.communicate()
    if error == b"":
        return(output.decode('utf-8').replace("\n", "").replace("\r", ""))
    else:
        return(error)

def getpublicip():
    response = requests.get('https://api.ipify.org?format=json')
    ip_address = response.json()['ip']
    return(ip_address)

def getos():
    wmi_obj = wmi.WMI()
    os_info = wmi_obj.Win32_OperatingSystem()[0]
    return(os_info.Name, os_info.Version, os_info.OSArchitecture)

def getcpu():
    return(str(cpu_percent()) + "%", )

def getdisk():
    disk = disk_usage('/')
    disk_total = str(round(disk.total / (1024*1024*1024))) + "GB"
    disk_used = str(round(disk.used / (1024*1024*1024))) + "GB"
    disk_free = str(round(disk.free / (1024*1024*1024))) + "GB"
    disk_percent = str(round(disk.percent)) + "%"
    return(disk_total, disk_used, disk_free, disk_percent)

def getram():
    mem = virtual_memory()
    return(round(mem.total / (1024*1024*1024)), round(mem.available /  (1024*1024*1024)), round(mem.used /  (1024*1024*1024)) ,(mem.percent / (1024*1024*1024)))


def getcpuname():
    cpus = []
    c = wmi.WMI(namespace='root\\CIMV2')
    processors = c.Win32_Processor()
    for processor in processors:
        cpus.append(processor.Name)
    return(cpus)

def getgpu():
    gpuslist = []
    c = wmi.WMI(namespace='root\\CIMV2')
    gpus = c.Win32_VideoController()
    for gpu in gpus:
        gpuslist.append(gpu.Caption)
    return gpuslist

def getall():
    listcpu = []
    listgpu = []
    try:
        username = getusername()
        publicip = getpublicip()
        os_name , os_version , architecture = getos()
        rtotal, ravailable, rused , rpercent = getram()
        dtotal , dused , dfree, dpercent = getdisk()
        cpupercent = getcpu()
        cpuname = getcpuname()
        cpu_count = 1
        gpu_count = 1    
        for cpu in cpuname:
            cpudisplay = "CPU" + str(cpu_count) + ": " + cpu
            listcpu.append(cpudisplay)
            cpu_count += 1
        gpuname = getgpu()
        for gpu in gpuname:
            gpudisplay = "GPU" + str(gpu_count) + ": " + gpu
            listgpu.append(gpudisplay)
            gpu_count += 1
        string_cpu = '\n'.join(listcpu)
        string_gpu = '\n'.join(listgpu)
        return(f"""
    OS name: {os_name}
    OS version: {os_version}
    architecture: {architecture}
    Account Username: {username}
    public ip: {publicip}
    Total Ram: {rtotal}GB
    Available Ram: {ravailable}GB
    Used Ram: {rused}GB
    Total storage: {dtotal}
    storage used: {dused}
    storage free: {dfree}
    storage used percentage: {dpercent}
    cpu used percentage : {cpupercent}
    {string_cpu}
    {string_gpu}

   """)
    except:
        return("error")
